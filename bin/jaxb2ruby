#!/usr/bin/env ruby

abort "jaxb2ruby must be run with jruby" unless RUBY_PLATFORM == "java"

require "optparse"
require "fileutils"
require "yaml"
require "jaxb2ruby"

include JAXB2Ruby

def mapping_option(option)
  option.inject({}) do |cfg, opt|
    if !opt.include?("=")
      begin
        cfg.merge!(YAML.load_file(opt))
      rescue => e
        abort "cannot load mapping file: #{e}"
      end
    else
      url, klass = opt.split("=", 2)
      abort "mapping option invalid: #{opt}" if klass.nil? or klass.strip.empty?
      cfg[url] = klass
    end
    cfg
  end
end

tmpl = nil
outdir = "ruby"
options = {}
parser = OptionParser.new do |opts|
  opts.banner = "usage: #{File.basename($0)} [options] schema"

  opts.on("-b", "--binding=FILE", "specify external bindings files (xjb). Each FILE must have its own -b.") do |opt|
    (options[:bindings] ||= []).push(opt)
  end

  opts.on("-c", "--classes=MAP1[,MAP2,...]", Array, "XML Schema type to Ruby class mappings", "MAP can be a string in the form type=class or a YAML file of type/class pairs") do |typemap|
    options[:typemap] = mapping_option(typemap)
  end

  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on("-I", "--include=DIRECTORY", "Add DIRECTORY to the load path, usefull for using custom template helpers") do |path|
    $LOAD_PATH.unshift(path)
  end

  opts.on("-J", "--jvm=[ARG1[,ARG2,...]]", Array, "Options to pass to the JVM when calling XJC") do |opt|
    (options[:jvm] ||= []).concat(opt)
  end

  opts.on("-n", "--namespace=MAP1[,MAP2,...]", Array, "XML namespace to ruby class mappings", "MAP can be a string in the form namespace=class or a YAML file of namespace/class pairs") do |ns|
    options[:namespace] = mapping_option(ns)
  end

  opts.on("-o", "--output=DIRECTORY", "Directory to output the generated ruby classes, defaults to ruby") do |dir|
    outdir = dir
  end

  opts.on("-t", "--template=NAME", "Template used to generate the ruby classes", "Can be a path to an ERB template or one of: roxml (default), happymapper, ruby") do |t|
    tmpl = t
  end

  opts.on("-v", "--version", "jaxb2ruby version") do
    puts "v#{JAXB2Ruby::VERSION}"
    exit
  end

  opts.on("-w", "--wsdl", "Treat the schema as a WSDL", "Automatically set if the schema has a `.wsdl' extension") do
    options[:wsdl] = true
  end

  opts.on("-x", "--xjc=PATH", "Path to the XJC executable to use; defaults to xjc") do |path|
    options[:xjc] = path
  end
end

parser.parse!
schema = ARGV.shift
abort parser.banner if schema.nil?

begin
  template = Template.new(tmpl)
  ruby_classes = Converter.convert(schema, options)
  puts "outputting classes to #{outdir}"
  ruby_classes.each do |klass|
    puts "generating: #{klass.path}"
    FileUtils.mkdir_p(File.join(outdir, klass.directory))
    File.open(File.join(outdir, klass.path), "w") { |io| io.puts template.build(klass) }
  end
rescue => e
  abort "class generation failed: #{e}"
end
